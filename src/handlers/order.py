from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from config import ADMIN_IDS
from src.db.db_manager import DBManager
from src.keyboards.order import confirm_order_keyboard
from src.services.cart import clear_cart, get_cart
from src.states.order import OrderForm
from src.utils.cart_preview import get_cart_preview_text
from src.utils.state import clear_order_form

router = Router()
db = DBManager()


@router.callback_query(F.data == "order:start")
async def start_order(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.

    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –ë–î ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑.

    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç FSM –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏.
    """
    telegram_id = callback.from_user.id
    user = db.get_user(telegram_id)
    cart_text, total = await get_cart_preview_text(telegram_id)

    if user:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSMContext
        await state.update_data(
            user_id=user["id"],
            name=user["name"],
            phone=user["phone"],
            address=user["address"],
        )

        await callback.message.answer(
            f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"üë§ {user['name']}\n"
            f"üì± {user['phone']}\n"
            # f"üìç {user['address']}\n\n"
            f"<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n{cart_text}\n\n"
            f"<b>üí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:",
            reply_markup=confirm_order_keyboard(),
        )
    else:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(OrderForm.name)

    await callback.answer()


@router.callback_query(F.data == "order:confirm")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î.
    """
    telegram_id = callback.from_user.id
    data = await state.get_data()
    if not data.get("user_id"):
        user_id = db.create_or_update_user(
            telegram_id=callback.from_user.id,
            name=data["name"],
            phone=data["phone"],
            address=""
        )
        data["user_id"] = user_id
    await process_order(callback.message, state, data, telegram_id)
    await callback.answer()


@router.callback_query(F.data == "order:edit")
async def edit_order(callback: CallbackQuery, state: FSMContext):
    """
    –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö, –Ω–µ –æ—á–∏—â–∞—è –∫–æ—Ä–∑–∏–Ω—É.
    """
    await clear_order_form(state)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(OrderForm.name)
    await callback.answer()


@router.message(OrderForm.name)
async def get_name(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É ‚Äî —Ç–µ–ª–µ—Ñ–æ–Ω—É.
    """
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(OrderForm.phone)


@router.message(OrderForm.phone)
async def get_phone(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É ‚Äî –∞–¥—Ä–µ—Å—É.
    """
    telegram_id = message.from_user.id
    await state.update_data(phone=message.text)
    data = await state.get_data()
    cart_text, total = await get_cart_preview_text(telegram_id)

    await message.answer(
        f"üë§ {data['name']}\n"
        f"üì± {data['phone']}\n\n"
        f"<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n{cart_text}\n\n"
        f"<b>üí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ</b>\n\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:",
        reply_markup=confirm_order_keyboard()
    )
    # await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    # await state.set_state(OrderForm.address)


# @router.message(OrderForm.address)
# async def get_address(message: Message, state: FSMContext):
#     """
#     –ü–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.
#     """
#     await state.update_data(address=message.text)
#     data = await state.get_data()
#
#     user_id = db.create_or_update_user(
#         telegram_id=message.from_user.id, name=data["name"], phone=data["phone"], address=data["address"]
#     )
#
#     data["user_id"] = user_id
#
#     await message.answer(
#         f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n\n"
#         f"üë§ {data['name']}\n"
#         f"üì± {data['phone']}\n"
#         f"üìç {data['address']}\n\n"
#         f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:",
#         reply_markup=confirm_order_keyboard(),
#     )


async def process_order(message_or_callback, state: FSMContext, data: dict, telegram_id: int):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑:
    - –ü–æ–ª—É—á–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –∏–∑ –ë–î
    - –°–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑
    - –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    - –û—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É
    """
    cart = db.get_cart(telegram_id)

    if not cart:
        await message_or_callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ üß∫")
        return

    items = []
    total = 0

    for pid, qty in cart.items():
        product = db.get_product_by_id(pid)
        if not product:
            continue
        subtotal = product.price * qty
        total += subtotal
        items.append({"product_name": product.name, "quantity": qty, "price": product.price})

    user_id = data.get("user_id")
    if not user_id:
        await message_or_callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    order_id = db.create_order(user_id, items)

    item_lines = "\n".join(
        f"{i['product_name']} x{i['quantity']} = {i['quantity'] * i['price']}‚ÇΩ"
        for i in items
    )

    text = (
        f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}</b>\n\n"
        f"üë§ {data.get('name')}\n"
        f"üì± {data.get('phone')}\n\n"
        f"{item_lines}\n\n"
        f"üí∞ <b>–ò—Ç–æ–≥–æ: {round(total, 2)}‚ÇΩ</b>"
    )

    for admin_id in ADMIN_IDS:
        await message_or_callback.bot.send_message(admin_id, text)

    await message_or_callback.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")

    db.clear_cart(telegram_id)
    await state.clear()
