from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from config import ADMIN_ID
from src.db.db_manager import DBManager
from src.keyboards.admin_panel import (admin_menu_keyboard,
                                       admin_order_actions_keyboard,
                                       delete_product_keyboard,
                                       product_management_keyboard)
from src.models.products import Product
from src.states.product import AddProduct

router = Router()
db = DBManager()


@router.message(F.text == "/admin")
async def admin_menu(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏: –ó–∞–∫–∞–∑—ã, –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.
    """
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_menu_keyboard())


@router.callback_query(F.data == "admin:orders")
async def show_new_orders(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.
    """
    orders = db.get_orders_by_status("new")
    if not orders:
        await callback.message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        await callback.answer()
        return

    for order in orders:
        items = db.get_order_items(order["order_id"])
        items_text = "\n".join(f"üçé {item['name']} x{item['qty']} = {item['qty'] * item['price']}‚ÇΩ" for item in items)

        text = (
            f"üì¶ <b>–ó–∞–∫–∞–∑ #{order['order_id']}</b>\n"
            f"üë§ {order['name']}\n"
            f"üì± {order['phone']}\n"
            f"üìç {order['address']}\n"
            f"üïí {order['created_at'].strftime('%Y-%m-%d %H:%M')}\n"
            f"üìù –°—Ç–∞—Ç—É—Å: {order['status']}\n\n"
            f"<b>–°–æ—Å—Ç–∞–≤:</b>\n{items_text}"
        )
        await callback.message.answer(text, reply_markup=admin_order_actions_keyboard(order["order_id"]))

    await callback.answer()


@router.callback_query(F.data.startswith("order:cancel:"))
async def cancel_order(callback: CallbackQuery):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑ (–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ 'canceled').
    """
    order_id = int(callback.data.split(":")[2])
    db.update_order_status(order_id, "canceled")
    await callback.message.edit_reply_markup()
    await callback.message.answer(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω.")


@router.callback_query(F.data.startswith("order:done:"))
async def finish_order(callback: CallbackQuery):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ 'delivered'.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ.
    """
    order_id = int(callback.data.split(":")[2])
    db.update_order_status(order_id, "delivered")
    await callback.message.edit_reply_markup()
    await callback.message.answer(f"üì¶ –ó–∞–∫–∞–∑ #{order_id} –∑–∞–≤–µ—Ä—à—ë–Ω.")


@router.callback_query(F.data == "admin:stats")
async def show_stats(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    stats = db.get_order_stats()

    text = (
        "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:</b>\n\n"
        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total']}\n"
        f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['delivered']}\n"
        f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {stats['canceled']}\n"
        f"üí∞ –í—ã—Ä—É—á–∫–∞: {stats['revenue']} ‚ÇΩ"
    )
    await callback.message.answer(text)
    await callback.answer()


@router.callback_query(F.data == "admin:products")
async def show_product_menu(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏: –¥–æ–±–∞–≤–∏—Ç—å / —É–¥–∞–ª–∏—Ç—å.
    """
    await callback.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:", reply_markup=product_management_keyboard())
    await callback.answer()


@router.callback_query(F.data == "admin:product:add")
async def start_add_product(callback: CallbackQuery, state: FSMContext):
    """
    –°—Ç–∞—Ä—Ç FSM –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.
    """
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.name)
    await callback.answer()


@router.message(AddProduct.name)
async def get_product_name(message: Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∏–º—è —Ç–æ–≤–∞—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã.
    """
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await state.set_state(AddProduct.price)


@router.message(AddProduct.price)
async def get_product_price(message: Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–π —Ü–µ–Ω—ã.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–µ–Ω—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        return
    await state.update_data(price=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ (—Ñ—Ä—É–∫—Ç—ã, –æ–≤–æ—â–∏, —è–≥–æ–¥—ã, –≥—Ä–∏–±—ã):")
    await state.set_state(AddProduct.category)


@router.message(AddProduct.category)
async def get_product_category(message: Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç Product,
    –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç FSM.
    """
    CATEGORY_MAP = {"—Ñ—Ä—É–∫—Ç—ã": "fruits", "–æ–≤–æ—â–∏": "vegetables", "—è–≥–æ–¥—ã": "berries", "–≥—Ä–∏–±—ã": "mushrooms"}

    user_input = message.text.strip().lower()
    category = CATEGORY_MAP.get(user_input)

    if not category:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑: —Ñ—Ä—É–∫—Ç—ã, –æ–≤–æ—â–∏, —è–≥–æ–¥—ã, –≥—Ä–∏–±—ã.")
        return

    await state.update_data(category=category)
    data = await state.get_data()

    product = Product(id=0, name=data["name"], price=data["price"], category=data["category"])

    db.add_product(product)
    await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä <b>{product.name}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    await state.clear()


@router.callback_query(F.data == "admin:product:delete")
async def choose_product_to_delete(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è.
    """
    products = db.get_all_products()

    if not products:
        await callback.message.answer("‚ùó –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        await callback.answer()
        return

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=delete_product_keyboard(products))
    await callback.answer()


@router.callback_query(F.data.startswith("delete:"))
async def delete_selected_product(callback: CallbackQuery):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –ø–æ ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    product_id = int(callback.data.split(":")[1])
    success = db.delete_product_by_id(product_id)

    if success:
        await callback.message.edit_text(f"‚úÖ –¢–æ–≤–∞—Ä —Å ID {product_id} —É–¥–∞–ª—ë–Ω.")
    else:
        await callback.message.answer(f"‚ùå –¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()
